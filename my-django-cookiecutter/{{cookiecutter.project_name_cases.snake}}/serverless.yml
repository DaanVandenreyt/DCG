service: osn-platform

package:
  exclude:
    - pytest_cache/**
    - node_modules/**
    - media/**
    - .idea/**
    - __pycache__/**
    - resources/**
    - config/**
    - db-tunnel.sh
    - tmp/**

plugins:
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-vpc-plugin
provider:
  name: aws
  lambdaHashingVersion: 20201221
  runtime: python3.8
  region: eu-central-1
  logs:
    restApi: true
  tracing:
    apiGateway: true
    lambda: true # Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough'
  profile: {{cookiecutter.aws_profile}} # This should be configured on your local machine in ~/.aws/credentials !
  stage: ${opt:stage, "dev"}
  memorySize: 512  # optional, in MB, default is 1024
  timeout: 30  # optional, in seconds, default is 6

  ecr:
    # In this section you can define images that will be built locally and uploaded to ECR
    images:
      osnplatform:
        path: "./"

  apiGateway:
    shouldStartNameWithService: true  # More Info: https://www.serverless.com/framework/docs/deprecations/#AWS_API_GATEWAY_NAME_STARTING_WITH_SERVICE
    binaryMediaTypes:
      - '*/*'
  environment:
    STAGE: ${self:provider.stage}

    DEBUG: True
    SHOW_DEBUG_TOOLBAR: True

    STRIP_STAGE_PATH: yes  # https://github.com/logandk/serverless-wsgi#using-cloudfront

    DOMAIN: ${self:custom.infrastructure.${self:provider.stage}.domainName, self:custom.infrastructure.default.domainName}
    AWS_S3_CUSTOM_DOMAIN: ${self:custom.infrastructure.${self:provider.stage}.cdnDomainName, self:custom.infrastructure.default.cdnDomainName}

    CLOUDFRONT_DISTRIBUTION_ID: !Ref CloudFrontDistribution
    CLOUDFRONT_INVALIDATE_STATIC_MANIFEST: True

    DATABASE_SECRET_ARN:
      Ref: DBSecret

    AWS_STORAGE_BUCKET_NAME:
      Ref: Bucket

    CACHE_REDIS_HOST: !GetAtt CacheCluster.RedisEndpoint.Address
    CACHE_REDIS_PORT: !GetAtt CacheCluster.RedisEndpoint.Port

  stackTags:
    user:project: {{cookiecutter.project_name_cases.snake}}
    user:stage: ${self:provider.stage}

  tags:
    user:project: {{cookiecutter.project_name_cases.snake}}
    user:stage: ${self:provider.stage}

  # AWS IAM ROLE STATEMENTS
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 's3:ListBucket'
          Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket,]]
        - Effect: 'Allow'
          Action:
            - 's3:GetObject'
            - 's3:GetObjectAcl'
            - 's3:PutObject'
            - 's3:PutObjectAcl'
            - 's3:DeleteObject'
            - 's3:DeleteObjectAcl'
            - 's3:HeadObject'
          Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket, '/*']]
        - Effect: 'Allow'
          Action:
            - 'secretsmanager:GetSecretValue'
          Resource:
            - Ref: DBSecret
            - Ref: GeoDBSecret
        - Effect: Allow
          Action:
            - 'cloudfront:CreateInvalidation'
          Resource:
            - !Join [ '', [ 'arn:aws:cloudfront::',  !Ref 'AWS::AccountId', ':distribution/', !Ref CloudFrontDistribution ]]
        - Effect: 'Allow'
          Action:
            - 'es:*'
          Resource: 'arn:aws:es:#{AWS::Region}:#{AWS::AccountId}:domain/osn-platform-${self:provider.stage}-search/*'
        - Effect: 'Allow'
          Action:
            - 'dynamodb:List*'
            - 'dynamodb:Describe*'
            - 'cloudformation:ListExports'
          Resource:
            '*'
        - Effect: 'Allow'
          Action:
            - 'dynamodb:BatchGet*'
            - 'dynamodb:Describe*'
            - 'dynamodb:Get*'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:BatchWrite*'
            - 'dynamodb:CreateTable'
            - 'dynamodb:Delete*'
            - 'dynamodb:Update*'
            - 'dynamodb:PutItem'
          Resource:
            - !Join ['', [ 'arn:aws:dynamodb:', !Ref 'AWS::Region',':',  !Ref 'AWS::AccountId', ':table/', !Ref LockingDbTable ]]
            - !Join ['', [ 'arn:aws:dynamodb:', !Ref 'AWS::Region',':',  !Ref 'AWS::AccountId', ':table/', !Ref AsyncResponseDbTable ]]
        - Effect: 'Allow'
          Action:
            - 'sqs:SendMessage'
          Resource:
            - !Join ['', [ 'arn:aws:sqs:', !Ref 'AWS::Region',':',  !Ref 'AWS::AccountId', ':', !GetAtt AsyncTaskQueue.QueueName ]]

custom:
  environment: ${file(config/env.${self:provider.stage, "dev"}.json)}

  iamUser: osn-platform-devops  # The user which will be running the lambda function (linked to provider.profile!)

  infrastructure:
    default:
      application:
        databaseName: 'osn'
        databaseSecretName: "rds-db-credentials/${self:service}/${self:provider.stage}"
        geoDatabaseName: 'geo'
        geoDatabaseSecretName: "rds-db-credentials/${self:service}/${self:provider.stage}/geo"

      hostedZone: 100procentlokaal.be.
      domainCert: 'arn:aws:acm:eu-central-1:612681954602:certificate/35c2a596-6638-4b8e-a060-a95c0e775382'  # in eu-central-1
      cdnDomainCert: 'arn:aws:acm:us-east-1:612681954602:certificate/72444ffb-b07f-4072-b097-0829ed67d201'  # in us-east-1
      cdnPriceClass: 'PriceClass_100'  # one of `PriceClass_100`, `PriceClass_200` or `PriceClass_all`

    dev:
      database:
        rdsInstanceType: db.t3.micro
        rdsAllocatedStorage: 100  # in GB

      geoDatabase:
        auroraServerlessAutoPause: true
        auroraServerlessMaxCapacity: 2
        auroraServerlessMinCapacity: 2
        auroraServerlessSecondsUntilAutoPause: 300 # 5 minutes

      cache:
        elasticacheInstanceType: cache.t3.micro
        elasticacheNumCacheNodes: 1

      search:
        elasticSearchInstanceType: t2.small.elasticsearch
        elasticSearchInstanceCount: 1
        elasticSearchVolumeSize: 30  # in GB

      domainName: dev.new.100procentlokaal.be
      cdnDomainName: dev.cdn.100procentlokaal.be
    qa:
      database:
        rdsInstanceType: db.t3.micro
        rdsAllocatedStorage: 100  # in GB

      geoDatabase:
        auroraServerlessAutoPause: true
        auroraServerlessMaxCapacity: 2
        auroraServerlessMinCapacity: 2
        auroraServerlessSecondsUntilAutoPause: 300 # 5 minutes

      cache:
        elasticacheInstanceType: cache.t3.micro
        elasticacheNumCacheNodes: 1

      search:
        elasticSearchInstanceType: t2.small.elasticsearch
        elastiSearchInstanceCount: 1
        elasticSearchVolumeSize: 30  # in GB

      domainName: qa.new.100procentlokaal.be
      cdnDomainName: qa.cdn.100procentlokaal.be
    prod:
      database:
        rdsInstanceType: db.t3.small
        rdsAllocatedStorage: 120  # in GB

      geoDatabase:
        auroraServerlessAutoPause: true
        auroraServerlessMaxCapacity: 6
        auroraServerlessMinCapacity: 2
        auroraServerlessSecondsUntilAutoPause: 300 # 5 minutes

      cache:
        elasticacheInstanceType: cache.t3.micro
        elasticacheNumCacheNodes: 1

      search:
        elasticSearchInstanceType: m5.large.elasticsearch
        elastiSearchInstanceCount: 2
        elasticSearchVolumeSize: 120  # in GB

      domainName: new.100procentlokaal.be
      cdnDomainName: cdn.100procentlokaal.be

  vpcConfig:
    cidrBlock: '10.0.0.0/16'

    # if createNatGateway is a boolean "true", a NAT Gateway and EIP will be provisioned in each zone
    # if createNatGateway is a number, that number of NAT Gateways will be provisioned
#    createNatGateway: 2

    # When enabled, the DB subnet will only be accessible from the Application subnet
    # Both the Public and Application subnets will be accessible from 0.0.0.0/0
    createNetworkAcl: false

    # Whether to create the DB subnet
    createDbSubnet: true

    # Whether to enable VPC flow logging to an S3 bucket
    createFlowLogs: false

#    # Whether to create a bastion host
#    createBastionHost: false
#    bastionHostKeyName: "osn-platform"  # required if creating a bastion host

    # Whether to create a NAT instance
    createNatInstance: true

    # Whether to create AWS Systems Manager (SSM) Parameters
    createParameters: true

    # Optionally specify AZs (defaults to auto-discover all availabile AZs)
#    zones:
#      - us-east-1a
#      - us-east-1b
#      - us-east-1c

    # By default, S3 and DynamoDB endpoints will be available within the VPC
    # see https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html
    # for a list of available service endpoints to provision within the VPC
    # (varies per region)
    services:
      - kms
      - secretsmanager
      - s3
      - dynamodb

    # Optionally specify subnet groups to create. If not provided, subnet groups
    # for RDS, Redshift, ElasticCache and DAX will be provisioned.
    subnetGroups:
      - rds
      - elasticache

    # Whether to export stack outputs so it may be consumed by other stacks
    exportOutputs: false

  customDomain:
    domainName: ${self:custom.infrastructure.${self:provider.stage}.domainName, self:custom.infrastructure.default.domainName}
    certificateArn: ${self:custom.infrastructure.${self:provider.stage}.domainCert, self:custom.infrastructure.default.domainCert}
    basePath: ''
    stage: ${self:provider.stage}
    endpointType: 'regional'
    securityPolicy: tls_1_2

  bastion:
    hostKeyName: "osn-platform"
    securityGroupIngress:
      - CidrIp: "84.195.144.5/32"  # SSH From Dirk @ Home
        Description: "permit inbound SSH"
        FromPort: 22
        IpProtocol: "tcp"
        ToPort: 22
      - CidrIp: "94.143.189.244/32"  # SSH From Dirk @ Cronos/Kontich
        Description: "permit inbound SSH"
        FromPort: 22
        IpProtocol: "tcp"
        ToPort: 22
      - CidrIp: "94.224.77.75/32"  # SSH From Oele @ Home
        Description: "permit inbound SSH"
        FromPort: 22
        IpProtocol: "tcp"
        ToPort: 22
      - CidrIp: "84.195.144.5/32"
        Description: "permit inbound ICMP"
        FromPort: -1
        IpProtocol: "icmp"
        ToPort: -1
      - CidrIp: "94.143.189.244/32"
        Description: "permit inbound ICMP"
        FromPort: -1
        IpProtocol: "icmp"
        ToPort: -1
      - CidrIp: "94.224.77.75/32"
        Description: "permit inbound ICMP"
        FromPort: -1
        IpProtocol: "icmp"
        ToPort: -1
functions:
  manage:
    image:
      name: osnplatform
      command:
        - manage.handler
      entryPoint:
        - '/lambda-entrypoint.sh'
    timeout: 300
    environment: ${self:custom.environment}
  app:
    image:
      name: osnplatform
      command:
        - osn.asgi.handler
      entryPoint:
        - '/lambda-entrypoint.sh'
    environment: ${self:custom.environment}
    events:
      - http: ANY /
      - http: 'ANY /{proxy+}'


resources:
  - ${file(resources/app/rds-main_cf.yml)}
  - ${file(resources/app/rds-geo_cf.yml)}
  - ${file(resources/app/elasticache_cf.yml)}
  - ${file(resources/app/s3_cf.yml)}
  - ${file(resources/app/cloudfront_cf.yml)}
  - ${file(resources/app/secretsmanager_cf.yml)}
  - ${file(resources/app/elasticsearch_cf.yml)}
  - ${file(resources/app/bastion_cf.yml)}
  - ${file(resources/app/dynamodb-locking_cf.yml)}
  - ${file(resources/app/dynamodb-asynctasks_cf.yml)}
  - ${file(resources/app/sqs-asynctasks_cf.yml)}
