---
Resources:
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Join ["-", [!Ref "AWS::StackName", "user-pool"]]
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true

  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Join ["-", [!Ref "AWS::StackName", "identity-pool"]]
      AllowUnauthenticatedIdentities: true

  UserPoolDomain:
    Type: "AWS::Cognito::UserPoolDomain"
    Properties:
      Domain: !Join ["-", [!Ref "AWS::StackName", "user-pool-domain"]]
      UserPoolId: !Ref UserPool

  AuthenticatedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "es:ESHttp*"
            Resource:
              - "*"

  AuthenticatedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      ManagedPolicyArns:
        - !Ref AuthenticatedPolicy

  RoleAttachment:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn

  AmazonESCognitoAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPool
              - cognito-idp:CreateUserPoolClient
              - cognito-idp:DeleteUserPoolClient
              - cognito-idp:DescribeUserPoolClient
              - cognito-idp:AdminInitiateAuth
              - cognito-idp:AdminUserGlobalSignOut
              - cognito-idp:ListUserPoolClients
              - cognito-identity:DescribeIdentityPool
              - cognito-identity:UpdateIdentityPool
              - cognito-identity:SetIdentityPoolRoles
              - cognito-identity:GetIdentityPoolRoles
            Resource: "*"
          - Effect: Allow
            Action: iam:PassRole
            Resource: "*"
            Condition:
              StringLike:
                iam:PassedToService: cognito-identity.amazonaws.com

  CognitoAccessForAmazonES:
    Type: "AWS::IAM::Role"
    Properties:
      Path: /service/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: es.amazonaws.com
      ManagedPolicyArns:
        - !Ref AmazonESCognitoAccess

  ElasticsearchDomain:
    Type: "AWS::Elasticsearch::Domain"
    Properties:
      DomainName: !Join ["-", [!Ref "AWS::StackName", "search"]]
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", "search" ] ]
        - Key: user:project
          Value: osn-platform
        - Key: user:stage
          Value: ${self:provider.stage}
      CognitoOptions:
        Enabled: true
        IdentityPoolId: !Ref IdentityPool
        RoleArn: !GetAtt CognitoAccessForAmazonES.Arn
        UserPoolId: !Ref UserPool
      ElasticsearchVersion: "7.7"
      ElasticsearchClusterConfig:
        InstanceCount: ${self:custom.infrastructure.${self:provider.stage}.search.elasticSearchInstanceCount, self:custom.infrastructure.default.search.elasticSearchInstanceCount}
        InstanceType: ${self:custom.infrastructure.${self:provider.stage}.search.elasticSearchInstanceType, self:custom.infrastructure.default.search.elasticSearchInstanceType}
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: ${self:custom.infrastructure.${self:provider.stage}.search.elasticSearchVolumeSize, self:custom.infrastructure.default.search.elasticSearchVolumeSize}
        VolumeType: "gp2"
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "arn:aws:iam::#{AWS::AccountId}:root"
            Action: "es:*"
            Resource: '*'  # "arn:aws:es:#{AWS::Region}:#{AWS::AccountId}:domain/phy-raw-index-${self:provider.stage}/*"

Outputs:
  ElasticsearchDomainEndpoint:
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "search-endpoint"]]
  ElasticsearchDomainArn:
    Value: !GetAtt ElasticsearchDomain.Arn
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "search"]]
